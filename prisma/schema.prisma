datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

enum UserRole {
  ADMIN
  BROKER
  TEACHER
  USER
}

enum UserSex {
  MALE
  FEMALE
  OTHER
}

enum Status {
  PENDING
  SCHEDULED
  ACTIVE
  OVER
}

enum ClassGroup {
  A
  B
  C
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  username      String?   @unique
  image         String?
  password      String?
  role          UserRole  @default(USER)
  bio           String?   @db.Text

  following  Follow[] @relation("Following")
  followedBy Follow[] @relation("FollowedBy")

  blocking  Block[] @relation("Blocking")
  blockedBy Block[] @relation("BlockedBy")

  stream Stream?

  accounts Account[]

  phone                 String?                @unique
  birthday              DateTime?
  sex                   UserSex                @default(MALE)
  cityId                String?
  city                  City?                  @relation(fields: [cityId], references: [id])
  village               String?                @db.Text
  job                   String?                @db.Text
  jobRequest            String?                @db.Text
  idImages              IdImage[]
  classId               String?
  class                 Class?                 @relation(fields: [classId], references: [id])
  departmentId          String?
  department            Department?            @relation(fields: [departmentId], references: [id])
  foundation            String?                @db.Text
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([cityId])
  @@index([classId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Wallet {
  userId  String @id
  balance Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Code {
  id         String   @id @default(uuid())
  userId     String
  used       Boolean?
  title      String
  codeUrl    String?  @db.Text
  qrCodeData Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Course {
  id          String     @id @default(uuid())
  userId      String
  isLive      Boolean    @default(false)
  title       String     @db.Text
  description String?    @db.Text
  imageUrl    String?    @db.Text
  price       Float?     @default(15)
  isPublished Boolean    @default(false)
  status      Status     @default(PENDING)
  group       ClassGroup @default(C)

  categoryId  String?
  category    Category?    @relation(fields: [categoryId], references: [id])
  classId     String?
  class       Class?       @relation(fields: [classId], references: [id])
  departments Department[]

  chapters    Chapter[]
  attachments Attachment[]
  purchases   Purchase[]

  enrolLimit Int? @default(50)

  createdAt DateTime @default(now())
  startsBy  DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([classId])
  @@index([categoryId])
}

model City {
  id    String @id @default(uuid())
  name  String @unique
  users User[]
}

model Class {
  id         String       @id @default(uuid())
  name       String       @unique
  classIndex Int
  users      User[]
  courses    Course[]
  categoryId String?
  category   Category?    @relation(fields: [categoryId], references: [id])
  department Department[]

  @@index([categoryId])
}

model Department {
  id         String    @id @default(uuid())
  name       String    @unique
  users      User[]
  Course     Course[]
  Class      Class[]
  Category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?
}

model Category {
  id          String       @id @default(uuid())
  name        String       @unique
  courses     Course[]
  departments Department[]
  Class       Class[]
}

model Attachment {
  id   String @id @default(uuid())
  name String
  url  String @db.Text

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model IdImage {
  id   String @id @default(uuid())
  name String
  url  String @db.Text

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Chapter {
  id          String  @id @default(uuid())
  title       String
  description String? @db.Text
  videoUrl    String? @db.Text
  position    Int
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)

  muxData MuxData?

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model MuxData {
  id         String  @id @default(uuid())
  assetId    String
  playbackId String?

  chapterId String  @unique
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id     String @id @default(uuid())
  userId String

  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model Purchase {
  id     String @id @default(uuid())
  userId String

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([userId, courseId])
  @@index([courseId])
}

model StripeCustomer {
  id               String @id @default(uuid())
  userId           String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Stream {
  id           String  @id @default(uuid())
  name         String  @db.Text
  thumbnailUrl String? @db.Text

  ingressId String? @unique
  serverUrl String? @db.Text
  streamKey String? @db.Text

  isLive              Boolean @default(false)
  isChatEnabled       Boolean @default(true)
  isChatDelayed       Boolean @default(false)
  isChatFollowersOnly Boolean @default(false)

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // @@fulltext([name])

  @@index([userId])
  @@index([ingressId])
}

model Follow {
  id          String @id @default(uuid())
  followerId  String
  followingId String

  follower  User @relation(name: "Following", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation(name: "FollowedBy", fields: [followingId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Block {
  id        String @id @default(uuid())
  blockerId String
  blockedId String

  blocker User @relation(name: "Blocking", fields: [blockerId], references: [id], onDelete: Cascade)
  blocked User @relation(name: "BlockedBy", fields: [blockedId], references: [id], onDelete: Cascade)

  @@unique([blockerId, blockedId])
  @@index([blockerId])
  @@index([blockedId])
}
